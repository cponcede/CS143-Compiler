user: jakerach
user: cponcede

Write-up for PA4
----------------

1. Data Structures:

We used a large number of data structures in our code generation. Below is a list of all of them:

class ClassInfo:
A class that contains information about what is contained inside of each class definition. This
includes attribute names, attribute types, method_names, the names of the class that defined each
method, and a map from attribute name to the correct offset of that attribute in the actual object.
In addition, the class_tag for that class is saved within the ClassInfo for the class. We can use
this to lookup class_tag information later.

class_info_map:
This map within CgenClassTable is used to get from a class name to the ClassInfo object for
that class.

CgenClassTable:

This class, which was provided but has been extended by us, is used to look up all required
information related to classes while performing code generation. It can be used to lookup
class inheritance information, the methods defined within each class (through the class_to_method_map
member), the corresponding class name for a given class tag. In addition, the constructor of this
object is what starts the code generation process.

CgenClassTable also includes the num_subclass_map, which maps the name of a class to the
number of subclasses that are defined for it. This is used to appropriately account for
subclasses in case statements. Because class tags are given out in a recursive dive of the
inheritance graph, a class will always have a smaller class tag than any of its subclasses.
This meant that all n possible subclasses of a class with classtag i have classtags in the range
[i, i+n].

Lastly, the CgenClassTable distributes label identifiers that are used during code generation.

CgenNodeP cur_class:

Although this class was provided, we store a static global node that is pointing the class
that we are currently evaluating.






2. Code Breakdown:

Our code runs in two sections. The first section preforms all "preprocessing" of
sorts. The overview of our process can be seen by looking into our
CgenClassTable's code method. Our first few methods create the name table,
object table, each prototype object, and each dispatch table. We do this all
recursively by walking down the inheritance graph created in CgenClassTable. All
of this code is necessary to dive into the actual code generation.

In the second part of our program, we recursively walk through our AST to
generate all of our code. Here, we dive down, using something very similar to a
stack machine (with a couple extra registers) to generate valid assembly code.
The majority of the work came in this section. All rules follow the operational
semantics laid out in the cool manual.

The hardest part of this assignment was dealing with dynamic typing. In our case
statement, if the expression type was self type, we had to dynamically figure
out the tightest bounded class laid out in the case statement. This involved
sorting our list of classes in the statement by depth in the inheritance tree
(since we give class tags in a pre order traversal, a subclass will always have
a larger class tag than its super class, so we sort them by class tags highest
to lowest). Then, we get the range of the classtags that can match (again, the
pre order traversal guarantees that the tags of subchildren will be in one
contiguous range), and choose the correct case statement based on being in the
matching range. Since child classes are listed before parent classes, we will
always get the tightest match.




3. Testing Methodology:

To test our program's initial code creation (objTable, etc.), we mostly matched
our program with sample output. We just made sure that we had all necessary
fields in the tables present - which we did by comparing to whatever the sample
cgen outputted.

The bulk of our testing came in the second (and more substantial) phase of code
generation. To test our program, we created a separate directory called "tests,"
which is in our submission for your viewing pleasure. Tests contains a series of
tests that look at each of our code generation functions. Many of our tests rely
on if statements and dispatch statments, so we made sure to implement them
first. We would create a series of expressions that should have an expected
behavior, and if they did have that behavior, then in an if statement we would
dispatch to a void function. That way, we could tell if our code was working
correctly, since it would dispatch to void only on correct input.

After we thoroughly tested all our expressions through individual tests in the
tests directory, we just ran our program for sample files against reference
output, and saw how they differed. We used this to make sure that our code
worked on large scale functions.

